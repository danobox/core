openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - url: https://virtserver.swaggerhub.com/danhunsaker/Microbox/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://api.microbox.cloud/v1
    description: The production version of Microbox.
  - url: https://api.xn-box-wyc.cloud/v1
    description: The staging version of Microbox.
  - url: https://api.nanobox.io/v1
    description: The production version of Nanobox.
info:
  version: "1.0.0"
  title: Microbox Core API
  description: The full API spec for Microbox Core, and other Nanobox-v1-compatible dashboard and coordination servers.
  contact:
    name: Dan Hunsaker
    email: danhunsaker@gmail.com
  license:
    url: https://choosealicense.com/licenses/mit/
    name: MIT License
paths:
  /:
    get:
      operationId: getVersion
      summary: Returns the current API name and version.
      description: The Nanobox API no longer exposes this endpoint, but Microbox will for purposes of detecting the difference in future releases when that starts to matter.
      security: []
      responses:
        '200':
          description: A JSON object with the name and version of the API.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    description: the name of the API provider
                    type: string
                    example: Microbox API
                  version:
                    description: the API version
                    type: string
                    example: 1.0.0
        '404':
          description: Returned by Nanobox.
  /user_auth_token:
    get:
      operationId: getToken
      summary: Look up the auth token of the user
      security: []
      parameters:
        - name: slug
          in: query
          required: true
          description: email address of the user
          schema:
            type: string
            example: johndoe@example.com
        - name: password
          in: query
          required: true
          description: password of the user
          schema:
            type: string
            example: P@ssw0rd
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication_token:
                    description: the user's authentication token, for accessing this API
                    type: string
                    example: MDAwMDAwMDAwMDAwMDA
                  id:
                    description: the UUID of the user
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
      tags:
        - user
  /users/{slug}/auth_token:
    get:
      operationId: getTokenFromUsername
      summary: Look up the auth token of the user
      security: []
      deprecated: true
      description: Duplicate of `GET /user_auth_token`, with the `slug` in the path; abandoned with a switch from usernames to emails for login credentials
      parameters:
        - name: slug
          in: path
          required: true
          description: username of the user
          schema:
            type: string
            example: johndoe
        - name: password
          in: query
          required: true
          description: password of the user
          schema:
            type: string
            example: P@ssw0rd
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication_token:
                    description: the user's authentication token, for accessing this API
                    type: string
                    example: MDAwMDAwMDAwMDAwMDA
                  id:
                    description: the UUID of the user
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
      tags:
        - user
  /users/{anything}:
    get:
      operationId: getUser
      summary: Get the current user
      parameters:
        - name: anything
          in: path
          required: true
          description: ignored; use "me"
          schema:
            type: string
            enum: [me]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
        - user
  /adapters/{token}:
    post:
      operationId: registerHostingProvider
      summary: Register a hosting provider adapter
      parameters:
        - name: token
          in: path
          required: true
          description: the adapter registration token generated by the dashboard for this adapter
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  description: the base URL to use for requests to the adapter
                  type: string
                  example: https://great-adapter.io/
      responses:
        '202':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  unlink_code:
                    description: a code used to confirm a request to unregister this adapter is legitimate
                    type: string
          links:
            unregister:
              operationId: unregisterHostingProvider
              parameters:
                token: $request.path.token
                unlink_code: $response.body#/unlink_code
      callbacks:
        Meta:
          '{$request.body#/endpoint}/meta':
            get:
              summary: meta
              tags: [meta]
              description: The `/meta` route is used to provide Microbox with various pieces of metadata that will be used for displaying information in the dashboard and for requesting authentication information from the users.
              security: []
              responses:
                200:
                  description: successful operation
                  content:
                    application/json:
                      schema:
                        type: object
                        required:
                          - id
                          - name
                          - server_nick_name
                          - default_region
                          - default_size
                          - can_reboot
                          - can_rename
                          - internal_iface
                          - external_iface
                          - ssh_user
                          - ssh_auth_method
                          - ssh_key_method
                          - bootstrap_script
                          - credential_fields
                        properties:
                          id:
                            type: string
                            description: some unique identifier
                          name:
                            type: string
                            description: display name used in the dashboard
                          server_nick_name:
                            type: string
                            description: what this provider calls their servers
                          default_region:
                            type: string
                            description: the default region to launch servers when not specified
                          default_size:
                            type: string
                            description: default server size to use when creating an app
                          default_plan:
                            type: string
                            description: the id of the default plan in which the default size is ordered
                          can_reboot:
                            type: boolean
                            description: boolean to determine if we can reboot the server through the api
                          can_rename:
                            type: boolean
                            description: boolean to determine if we can rename the server through the api
                          internal_iface:
                            type: string
                            description: Internal interface. e.g. eth1
                          external_iface:
                            type: string
                            description: External interface. e.g. eth0
                          ssh_user:
                            type: string
                            description: The ssh user Microbox can use for ssh access to bootstrap the server. e.g. root
                          ssh_auth_method:
                            enum:
                            - key
                            - password
                            type: string
                            description: will either be 'key' or 'password'. When set to 'key', Microbox will behave in accordance with the <code>ssh_key_method</code> value. When set to 'password', Microbox will use the install server key endpoint to install the SSH key manually via the adapter instead of passing it in the create server step.
                          ssh_key_method:
                            enum:
                            - reference
                            - object
                            type: string
                            description: will either be 'reference' or 'object'. When set to 'reference', Microbox will first create the SSH key in the user's provider account, then pass a reference to it when servers are created. When set to 'object', Microbox will pass the actual public SSH key that should be installed on the server.
                          bootstrap_script:
                            type: string
                            description: The script that should be used to bootstrap the server. e.g. https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ubuntu.sh
                          credential_fields:
                            type: array
                            items:
                              required:
                              - key
                              - label
                              type: object
                              properties:
                                key:
                                  type: string
                                  description: suffix for Auth- headers used to identify each auth field
                                label:
                                  type: string
                                  description: text to display to the user for each auth field
                            description: array of hashes that includes field keys and labels necessary to authenticate with the provider
                          instructions:
                            type: string
                            description: string that contains instructions for how to setup authentication with the provider
                      example:
                        id: do
                        name: Digital Ocean
                        server_nick_name: Droplet
                        default_region: sfo1
                        default_size: 512mb
                        default_plan: standard
                        can_reboot: true
                        can_rename: true
                        internal_iface: eth1
                        external_iface: eth0
                        ssh_user: root
                        ssh_auth_method: key
                        ssh_key_method: reference
                        bootstrap_script: https://s3.amazonaws.com/tools.nanobox.io/bootstrap/ubuntu.sh
                        credential_fields:
                          - key: access-token
                            label: Access Token
                        instructions: <a href='//cloud.digitalocean.com/settings/api/tokens' target='_blank'>Create a Personal Access Token</a> in your Digital Ocean Account that has read/write access, then add the token here or view the <a href='//www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2#how-to-generate-a-personal-access-token' target='_blank'>full guide</a>
          '{$request.body#/endpoint}/catalog':
            get:
              summary: catalog
              tags: [meta]
              description: The `/catalog` route is used to provide Microbox with a catalog of server sizes and options, within the available geographic regions.
              security: []
              responses:
                200:
                  description: The response data should be a list (array) of regions. Each region should contain a list of plans. It is not necessary to have multiple regions, however the structure will be the same regardless. Additionally, your integration may only have one classification of server types, or you may have high-cpu, high-ram, or high-IO options. A plan is a grouping of server sizes within a classification.
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          required:
                          - id
                          - name
                          - plans
                          type: object
                          properties:
                            id:
                              type: string
                              description: unique region identifier to be used when ordering a server
                            name:
                              type: string
                              description: the visual identifier for the customer
                            plans:
                              type: array
                              items:
                                required:
                                - id
                                - name
                                - specs
                                type: object
                                properties:
                                  id:
                                    type: string
                                    description: unique plan identifier
                                  name:
                                    type: string
                                    description: 'the classification of the server options within this plan. The name should indicate to the user what kinds of workloads these server options are ideal for. For instance: "Standard" or "High CPU"'
                                  specs:
                                    type: array
                                    items:
                                      required:
                                      - id
                                      - ram
                                      - cpu
                                      - disk
                                      - transfer
                                      - dollars_per_hr
                                      - dollars_per_mo
                                      type: object
                                      properties:
                                        id:
                                          type: string
                                          description: a unique identifier that will be used when ordering a server
                                        ram:
                                          type: integer
                                          description: a visual indication to the user informing the amount of RAM is provided
                                          format: int32
                                        cpu:
                                          type: integer
                                          description: a visual indication to the user informing the amount of CPUs or CPU cores
                                          format: int32
                                        disk:
                                          type: integer
                                          description: a visual indication to the user informing the amount or size of disk
                                          format: int32
                                        transfer:
                                          type: integer
                                          description: a visual indication to the user informing the amount of data transfer allowed per month for this server
                                          format: int32
                                        dollars_per_hr:
                                          type: number
                                          description: a visual indication to the user informing the cost of running this server per hour
                                        dollars_per_mo:
                                          type: number
                                          description: a visual indication to the user informing the cost of running this server per month
                                    description: the list of server options within this plan. Each spec should have the following fields
                              description: A grouping of server sizes within a classification. Each plan consists of the following
                        description: The response data should be a list (array) of regions. Each region should contain a list of plans. It is not necessary to have multiple regions, however the structure will be the same regardless. Additionally, your integration may only have one classification of server types, or you may have high-cpu, high-ram, or high-IO options. A plan is a grouping of server sizes within a classification.
                      example:
                      - id: sfo1
                        name: San Francisco 1
                        plans:
                        - id: standard
                          name: Standard Configuration
                          specs:
                          - id: 512mb
                            ram: 512
                            cpu: 1
                            disk: 20
                            transfer: 1
                            dollars_per_hr: 0.0074400000000000004
                            dollars_per_mo: 5
                          - id: 1gb
                            ram: 1024
                            cpu: 1
                            disk: 30
                            transfer: 2
                            dollars_per_hr: 0.014880000000000001
                            dollars_per_mo: 10
          '{$request.body#/endpoint}/verify':
            post:
              summary: verify
              tags: [meta]
              description: The `/verify` route is used to verify a user's account credentials. The `credential_fields` specified in the metadata will be provided in the dashboard and required to be filled before the user can use this provider. After the credentials are provided, Microbox will call this route with the credentials as headers to verify that the account credentials provided by the user are valid.
              security:
                - CallbackToken: []
              responses:
                200:
                  description: successful operation
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
        SshKey:
          '{$request.body#/endpoint}/keys':
            post:
              summary: create-ssh-key
              tags: [keys]
              description: >
                "<p>The `/keys` route is used to authorize Microbox with the user's account that will be ordering servers. After ordering a server, Microbox needs to SSH into the server to provision it. Microbox will pre-generate an SSH key for the user's account and the authorization route allows Microbox to register this key with the user's account on this provider so that Microbox can access the server after it is ordered.</p>
                <p>NOTE: This route is *not* required if your provider uses passwords for SSH instead of SSH keys, assuming the install server key endpoint is implemented instead.</p>"
              security:
                - CallbackToken: []
              requestBody:
                description: Key ID and contents to save
                content:
                  application/json:
                    schema:
                      required:
                      - id
                      - key
                      type: object
                      properties:
                        id:
                          type: string
                          description: the user-friendly name of the key
                        key:
                          type: string
                          description: The public key to register with the user's account. It is assumed that this public key will be installed on every server launched by this integration.
                required: true
              responses:
                201:
                  description: successful operation
                  content:
                    application/json:
                      schema:
                        required:
                        - id
                        type: object
                        properties:
                          id:
                            type: string
                            description: fingerprint or key identifier to use when ordering servers
                      example:
                        id: provider-key-ID
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
          '{$request.body#/endpoint}/keys/{id}':
            get:
              summary: query-ssh-key
              tags: [keys]
              description: '<p>The `GET /keys/{id}` route is used by Microbox to query the existence of previously created key.</p> <p>NOTE: This route is *not* required if your provider uses passwords for SSH instead of SSH keys, assuming the install server key endpoint is implemented instead.</p>'
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the key id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              responses:
                201:
                  description: successful operation
                  content:
                    application/json:
                      schema:
                        required:
                        - id
                        - name
                        - public_key
                        type: object
                        properties:
                          id:
                            type: string
                            description: fingerprint or key identifier to use when ordering servers
                          name:
                            type: string
                            description: the user-friendly name of the key
                          public_key:
                            type: string
                            description: contents of public key
                      example:
                        id: provider-key-ID
                        name: Microbox-provider-account-ID
                        public_key: CONTENTS OF PUBLIC KEY
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
            delete:
              summary: delete-ssh-key
              tags: [keys]
              description: '<p>The `DELETE /keys/{id}` route is used to cancel a key that was previously created via Microbox.</p> <p>NOTE: This route is *not* required if your provider uses passwords for SSH instead of SSH keys, assuming the install server key endpoint is implemented instead.</p>'
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the key id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              responses:
                200:
                  description: successful operation
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
          '{$request.body#/endpoint}/servers/{id}/keys':
            patch:
              summary: install-ssh-key
              tags: [keys]
              description: "<p>The `/servers/{id}/keys` route is used to authorize Microbox with a server that was previously ordered via Microbox. Microbox will pre-generate an SSH key for the user's account, and this route allows Microbox to register that key with the server so that Microbox can access it after it is ordered.</p> <p>NOTE: This route is *only* required if your provider uses passwords for SSH instead of SSH keys.</p>"
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the server id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              requestBody:
                description: Key ID and contents to save
                content:
                  application/json:
                    schema:
                      required:
                      - id
                      - key
                      type: object
                      properties:
                        id:
                          type: string
                          description: the user-friendly name of the key
                        key:
                          type: string
                          description: The public key to register on the server.
                required: true
              responses:
                200:
                  description: successful operation
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
        Server:
          '{$request.body#/endpoint}/servers':
            post:
              summary: order-server
              tags: [servers]
              description: The `/servers` route is how Microbox submits a request to order a new server. This route SHOULD NOT hold open the request until the server is ready. The request should return immediately once the order has been submitted with an identifier that Microbox can use to followup on the order status.
              security:
                - CallbackToken: []
              requestBody:
                description: Server creation data
                content:
                  application/json:
                    schema:
                      required:
                      - name
                      - region
                      - size
                      type: object
                      properties:
                        name:
                          type: string
                          description: Microbox-generated name used to identify the machine visually as ordered by Microbox
                        region:
                          type: string
                          description: the region wherein to launch the server, which will match the region `id` from the catalog
                        size:
                          type: string
                          description: the size of server to provision, which will match an `id` provided in the aforementioned catalog
                        ssh_key:
                          type: string
                          description: id of the SSH key created during the `/keys` request
                required: true
              responses:
                201:
                  description: successful operation
                  content:
                    application/json:
                      schema:
                        required:
                        - id
                        type: object
                        properties:
                          id:
                            type: string
                            description: unique id of the server
                        example:
                          id: provider-server-ID
                      example:
                        id: provider-server-ID
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
          '{$request.body#/endpoint}/servers/{id}':
            get:
              summary: query-server
              tags: [servers]
              description: The `GET /servers/{id}` route is used by Microbox to query state about a previously ordered server. This state is used to inform Microbox when the server is ready to be provisioned and also how to connect to the server.
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the server id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              responses:
                201:
                  description: successful operation
                  content:
                    application/json:
                      schema:
                        required:
                        - id
                        - status
                        - name
                        - external_ip
                        - internal_ip
                        type: object
                        properties:
                          id:
                            type: string
                            description: the server id
                          status:
                            type: string
                            description: the status or availability of the server. (active indicates server is ready)
                          name:
                            type: string
                            description: name of the server
                          external_ip:
                            type: string
                            description: external or public IP of the server
                          internal_ip:
                            type: string
                            description: internal or private IP of the server
                      example:
                        id: provider-server-ID
                        status: active
                        name: microbox.cloud-cool-app-do.1.1
                        external_ip: 192.0.2.15
                        internal_ip: 192.168.0.15
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
            delete:
              summary: cancel-server
              tags: [servers]
              description: The `DELETE /servers/{id}` route is used to cancel a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely canceled. It should return immediately once the order to cancel has been submitted.
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the server id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              responses:
                200:
                  description: successful operation
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
          '{$request.body#/endpoint}/servers/{id}/reboot':
            patch:
              summary: reboot-server
              tags: [servers]
              description: The `/servers/{id}/reboot` route is used to reboot a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely rebooted. It should return immediately once the order to reboot has been submitted
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the server id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              responses:
                200:
                  description: successful operation
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
          '{$request.body#/endpoint}/servers/{id}/rename':
            patch:
              summary: rename-server
              tags: [servers]
              description: The `/servers/{id}/rename` route is used to rename a server that was previously ordered via Microbox. This route SHOULD NOT hold open the request until the server is completely renamed. It should return immediately once the order to rename has been submitted.
              security:
                - CallbackToken: []
              parameters:
              - name: id
                in: path
                description: the server id
                required: true
                style: simple
                explode: false
                schema:
                  type: string
              requestBody:
                description: New server name
                content:
                  application/json:
                    schema:
                      required:
                      - name
                      type: object
                      properties:
                        name:
                          type: string
                          description: the new name of the server
                required: true
              responses:
                200:
                  description: successful operation
                default:
                  description: Error
                  content:
                    application/json:
                      schema:
                        required:
                        - errors
                        type: object
                        properties:
                          errors:
                            type: array
                            items:
                              type: string
                            description: 'On Failure: Should return a json body with an errors node and a non 2xx status code.'
    delete:
      operationId: unregisterHostingProvider
      summary: Unregister a hosting provider adapter
      parameters:
        - name: token
          in: path
          required: true
          description: the adapter registration token used to register this adapter
          schema:
            type: string
        - name: unlink_code
          in: query
          required: true
          description: the unlink_code returned when this adapter was registered
          schema:
            type: string
      responses:
        '200':
          description: success
  /events:
    post:
      operationId: createEvent
      summary: Create an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  description: the details to create the event with
                  type: object
                  properties:
                    eventable_id:
                      description: the app name
                      type: string
                      example: example-app
                    message:
                      description: the message
                      type: string
                      example: example
                    action:
                      description: the action
                      type: string
                      example: example
                    meta:
                      description: any additional data
                      type: object
                      example: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: the details of the created event
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  eventable:
                    $ref: '#/components/schemas/App'
                  message:
                    description: the message
                    type: string
                    example: example
                  action:
                    description: the action
                    type: string
                    example: example
                  meta:
                    description: any meta data passed in
                    type: object
                    example: {}
        '422':
          description: unprocessable_entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: There was an error!
      tags:
        - event
  /apps:
    get:
      operationId: listApps
      summary: List all accessible apps.
      tags:
        - app
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
  /apps/{app}:
    get:
      operationId: getApp
      summary: Get information about a specific app.
      tags:
        - app
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
  /apps/{app}/components:
    get:
      operationId: listComponents
      summary: List components in a given app.
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
  /apps/{app}/components/{component}:
    get:
      operationId: getComponent
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: component
          in: path
          required: true
          description: the component's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
      summary: Get information about a specific component in a given app.
  /apps/{app}/deploys:
    get:
      operationId: listDeploys
      tags:
        - deploy
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deploy'
      summary: List deploys in a given app.
    post:
      operationId: createDeploy
      tags:
        - deploy
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                boxfile_content:
                  type: string
                  example: "--- \ndata.db: \n  image: nanobox/postgres:9.6 \nrun.config: \n  engine: static"
                build_id:
                  type: string
                  example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
                commit_message:
                  type: string
                  example: ""
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
      summary: Create a new deploy.
  /apps/{app}/deploys/{deploy}:
    get:
      operationId: getDeploy
      tags:
        - deploy
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: deploy
          in: path
          required: true
          description: the deploy's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
      summary: Get information about a specific deploy in a given app.
  /apps/{app}/evars:
    get:
      operationId: listEvars
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evar'
      summary: List environment variables in a given app.
    post:
      operationId: createEvar
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: EXAMPLE_EVAR
                value:
                  type: string
                  example: example value
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evar'
      summary: Add or set an environment variable.
  /apps/{app}/evars/{evar}:
    get:
      operationId: getEvar
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: evar
          in: path
          required: true
          description: the evar's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evar'
      summary: Get information about a specific environment variable in a given app.
    delete:
      operationId: deleteEvar
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: evar
          in: path
          required: true
          description: the evar's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
      summary: Delete an environment variable.
  /apps/{app}/services:
    get:
      operationId: listServices
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
      summary: List services in a given app.
  /apps/{app}/services/{service}:
    get:
      operationId: getService
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: service
          in: path
          required: true
          description: the service's UUID or slug
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      summary: Get information about a specific service in a given app.
  /apps/{app}/services/{service}/components:
    get:
      operationId: listServiceComponents
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: service
          in: path
          required: true
          description: the service's UUID or slug
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
      summary: List components in a given service of a given app.
  /apps/{app}/services/{service}/components/{component}:
    get:
      operationId: getServiceComponent
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: service
          in: path
          required: true
          description: the service's UUID or slug
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
        - name: component
          in: path
          required: true
          description: the component's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
      summary: Get information about a specific component in a given service of a given app.
  /apps/{app}/tunnels/{id}:
    get:
      operationId: openTunnel
      tags:
        - remote
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: id
          in: path
          required: true
          description: the name of the server or component to tunnel into
          schema:
            type: string
            example: "data.db"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: MDAwMDAwMD
                  url:
                    type: string
                    example: "0.0.0.0:8570"
                  protocol:
                    type: string
                    example: docker
                  port:
                    type: integer
                    example: 5432
      summary: Create a tunnel, and get the connection parameters.
  /apps/{app}/consoles/{id}:
    get:
      operationId: openConsole
      tags:
        - remote
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: id
          in: path
          required: true
          description: the name of the server or component to console into
          schema:
            type: string
            example: "do.1"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: MDAwMDAwMD
                  url:
                    type: string
                    example: "0.0.0.0:1289"
                  protocol:
                    type: string
                    example: ssh
      summary: Create a console session, and get the connection parameters.
components:
  securitySchemes:
    AuthToken:
      type: apiKey
      in: query
      name: auth_token
    CallbackToken:
      type: apiKey
      in: header
      name: X-Callback-Token
  parameters:
    app:
      name: app
      in: path
      required: true
      description: the application's UUID or name
      schema:
        type: string
        example: 00000000-0000-0000-0000-000000000000
    team:
      name: ci
      in: query
      required: false
      description: the application's team name, if `{app}` is a name
      schema:
        type: string
  schemas:
    App:
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: example-app
        timezone:
          type: string
          example: UTC
        state:
          type: string
          example: active
        auto_reconfigure:
          type: boolean
          example: false
    Component:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: data.db
        uid:
          type: string
          example: data.db
        deploy_strategy:
          type: string
          example: inline
        repair_strategy:
          type: string
          example: inline
        behaviors:
          type: array
          items:
            type: string
          example: [migratable, backupable]
        port:
          type: integer
          example: 5432
        state:
          type: string
          example: active
        pulse:
          type: string
          example: online
        category:
          type: string
          example: data
        network:
          type: string
          example: virt
        generation_counter:
          type: integer
          example: 2
        horizontal:
          type: boolean
          example: false
        redundant:
          type: boolean
          example: false
    Deploy:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        commit_message:
          type: string
          example: ""
        boxfile_content:
          type: string
          example: "--- \ndata.db: \n  image: nanobox/postgres:9.6 \nrun.config: \n  engine: static"
        build_id:
          type: string
          example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
        author_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        app_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
    Evar:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        title:
          type: string
          example: EXAMPLE_EVAR
        value:
          type: string
          example: example value
        internal:
          type: boolean
          example: false
        component_id:
          type: string
          example: null
    Service:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        uid:
          type: string
          example: logger1
        name:
          type: string
          example: logger
        slug:
          type: string
          example: logger
        url:
          type: string
          example: 0.0.0.0
        token:
          type: string
          example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
        mode:
          type: string
          example: simple
        ip:
          type: string
          example: 0.0.0.0
    User:
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: johndoe@example.com
        authentication_token:
          type: string
          example: MDAwMDAwMDAwMDAwMDA
        unconfirmed_email:
          type: boolean
          example: null
security:
  - AuthToken: []
tags:
  - name: app
    description: Endpoints that interact directly with the application.
  - name: component
    description: Endpoints that interact with application components.
  - name: deploy
    description: Endpoints for deploying code.
  - name: evar
    description: Endpoints for managing environment variables.
  - name: event
    description: Endpoints for interacting with events.
  - name: remote
    description: Endpoints for accessing servers and components.
  - name: service
    description: Endpoints for interacting with individual services within components.
  - name: user
    description: Endpoints that interact with user data.
