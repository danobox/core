openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/danhunsaker/Microbox/1.0.0
  - url: https://api.mubox.cloud/v1
    description: The production version of Microbox.
  - url: https://api.xn-box-wyc.cloud/v1
    description: The staging version of Microbox.
  - url: https://api.nanobox.io/v1
    description: The production version of Nanobox.
info:
  version: "1.0.0"
  title: Microbox Core API
  description: The full API spec for Microbox Core, and other Nanobox-v1-compatible dashboard and coordination servers.
  contact:
    name: Dan Hunsaker
    email: danhunsaker@gmail.com
  license:
    url: https://choosealicense.com/licenses/mit/
    name: MIT License
paths:
  /:
    get:
      operationId: getVersion
      summary: Returns the current API name and version.
      description: The Nanobox API no longer exposes this endpoint, but Microbox will for purposes of detecting the difference in future releases when that starts to matter.
      security: []
      responses:
        '200':
          description: A JSON object with the name and version of the API.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    description: the name of the API provider
                    type: string
                    example: Microbox API
                  version:
                    description: the API version
                    type: string
                    example: 1.0.0
        '404':
          description: Returned by Nanobox.
  /user_auth_token:
    get:
      operationId: getToken
      summary: Look up the auth token of the user
      security: []
      parameters:
        - name: slug
          in: query
          required: true
          description: email address of the user
          schema:
            type: string
            example: johndoe@example.com
        - name: password
          in: query
          required: true
          description: password of the user
          schema:
            type: string
            example: P@ssw0rd
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication_token:
                    description: the user's authentication token, for accessing this API
                    type: string
                    example: MDAwMDAwMDAwMDAwMDA
                  id:
                    description: the UUID of the user
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
      tags:
        - user
  /users/{slug}/auth_token:
    get:
      operationId: getTokenFromUsername
      summary: Look up the auth token of the user
      security: []
      deprecated: true
      description: Duplicate of `GET /user_auth_token`, with the `slug` in the path; abandoned with a switch from usernames to emails for login credentials
      parameters:
        - name: slug
          in: path
          required: true
          description: username of the user
          schema:
            type: string
            example: johndoe
        - name: password
          in: query
          required: true
          description: password of the user
          schema:
            type: string
            example: P@ssw0rd
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication_token:
                    description: the user's authentication token, for accessing this API
                    type: string
                    example: MDAwMDAwMDAwMDAwMDA
                  id:
                    description: the UUID of the user
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
      tags:
        - user
  /users/{anything}:
    get:
      operationId: getUser
      summary: Get the current user
      parameters:
        - name: anything
          in: path
          required: true
          description: ignored; use "me"
          schema:
            type: string
            enum: [me]
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
        - user
  /events:
    post:
      operationId: createEvent
      summary: Create an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  description: the details to create the event with
                  type: object
                  properties:
                    eventable_id:
                      description: the app name
                      type: string
                      example: example-app
                    message:
                      description: the message
                      type: string
                      example: example
                    action:
                      description: the action
                      type: string
                      example: example
                    meta:
                      description: any additional data
                      type: object
                      example: {}
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: the details of the created event
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  eventable:
                    $ref: '#/components/schemas/App'
                  message:
                    description: the message
                    type: string
                    example: example
                  action:
                    description: the action
                    type: string
                    example: example
                  meta:
                    description: any meta data passed in
                    type: object
                    example: {}
        '422':
          description: unprocessable_entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: There was an error!
      tags:
        - event
  /apps:
    get:
      operationId: listApps
      summary: List all accessible apps.
      tags:
        - app
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
  /apps/{app}:
    get:
      operationId: getApp
      summary: Get information about a specific app.
      tags:
        - app
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
  /apps/{app}/components:
    get:
      operationId: listComponents
      summary: List components in a given app.
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
  /apps/{app}/components/{component}:
    get:
      operationId: getComponent
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: component
          in: path
          required: true
          description: the component's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
      summary: Get information about a specific component in a given app.
  /apps/{app}/deploys:
    get:
      operationId: listDeploys
      tags:
        - deploy
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deploy'
      summary: List deploys in a given app.
    post:
      operationId: createDeploy
      tags:
        - deploy
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                boxfile_content:
                  type: string
                  example: "--- \ndata.db: \n  image: nanobox/postgres:9.6 \nrun.config: \n  engine: static"
                build_id:
                  type: string
                  example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
                commit_message:
                  type: string
                  example: ""
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
      summary: Create a new deploy.
  /apps/{app}/deploys/{deploy}:
    get:
      operationId: getDeploy
      tags:
        - deploy
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: deploy
          in: path
          required: true
          description: the deploy's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deploy'
      summary: Get information about a specific deploy in a given app.
  /apps/{app}/evars:
    get:
      operationId: listEvars
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evar'
      summary: List environment variables in a given app.
    post:
      operationId: createEvar
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: EXAMPLE_EVAR
                value:
                  type: string
                  example: example value
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evar'
      summary: Add or set an environment variable.
  /apps/{app}/evars/{evar}:
    get:
      operationId: getEvar
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: evar
          in: path
          required: true
          description: the evar's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evar'
      summary: Get information about a specific environment variable in a given app.
    delete:
      operationId: deleteEvar
      tags:
        - evar
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: evar
          in: path
          required: true
          description: the evar's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
      summary: Delete an environment variable.
  /apps/{app}/services:
    get:
      operationId: listServices
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
      summary: List services in a given app.
  /apps/{app}/services/{service}:
    get:
      operationId: getService
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: service
          in: path
          required: true
          description: the service's UUID or slug
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      summary: Get information about a specific service in a given app.
  /apps/{app}/services/{service}/components:
    get:
      operationId: listServiceComponents
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: service
          in: path
          required: true
          description: the service's UUID or slug
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component'
      summary: List components in a given service of a given app.
  /apps/{app}/services/{service}/components/{component}:
    get:
      operationId: getServiceComponent
      tags:
        - component
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: service
          in: path
          required: true
          description: the service's UUID or slug
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
        - name: component
          in: path
          required: true
          description: the component's UUID
          schema:
            type: string
            example: 00000000-0000-0000-0000-000000000000
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
      summary: Get information about a specific component in a given service of a given app.
  /apps/{app}/tunnels/{id}:
    get:
      operationId: openTunnel
      tags:
        - remote
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: id
          in: path
          required: true
          description: the name of the server or component to tunnel into
          schema:
            type: string
            example: "data.db"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: MDAwMDAwMD
                  url:
                    type: string
                    example: "0.0.0.0:8570"
                  protocol:
                    type: string
                    example: docker
                  port:
                    type: integer
                    example: 5432
      summary: Create a tunnel, and get the connection parameters.
  /apps/{app}/consoles/{id}:
    get:
      operationId: openConsole
      tags:
        - remote
      parameters:
        - $ref: '#/components/parameters/app'
        - $ref: '#/components/parameters/team'
        - name: id
          in: path
          required: true
          description: the name of the server or component to console into
          schema:
            type: string
            example: "do.1"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: MDAwMDAwMD
                  url:
                    type: string
                    example: "0.0.0.0:1289"
                  protocol:
                    type: string
                    example: ssh
      summary: Create a console session, and get the connection parameters.
components:
  securitySchemes:
    AuthToken:
      type: apiKey
      in: query
      name: auth_token
  parameters:
    app:
      name: app
      in: path
      required: true
      description: the application's UUID or name
      schema:
        type: string
        example: 00000000-0000-0000-0000-000000000000
    team:
      name: ci
      in: query
      required: false
      description: the application's team name, if `{app}` is a name
      schema:
        type: string
  schemas:
    App:
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: example-app
        timezone:
          type: string
          example: UTC
        state:
          type: string
          example: active
        auto_reconfigure:
          type: boolean
          example: false
    Component:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: data.db
        uid:
          type: string
          example: data.db
        deploy_strategy:
          type: string
          example: inline
        repair_strategy:
          type: string
          example: inline
        behaviors:
          type: array
          items:
            type: string
          example: [migratable, backupable]
        port:
          type: integer
          example: 5432
        state:
          type: string
          example: active
        pulse:
          type: string
          example: online
        category:
          type: string
          example: data
        network:
          type: string
          example: virt
        generation_counter:
          type: integer
          example: 2
        horizontal:
          type: boolean
          example: false
        redundant:
          type: boolean
          example: false
    Deploy:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        commit_message:
          type: string
          example: ""
        boxfile_content:
          type: string
          example: "--- \ndata.db: \n  image: nanobox/postgres:9.6 \nrun.config: \n  engine: static"
        build_id:
          type: string
          example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
        author_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        app_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
    Evar:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        title:
          type: string
          example: EXAMPLE_EVAR
        value:
          type: string
          example: example value
        internal:
          type: boolean
          example: false
        component_id:
          type: string
          example: null
    Service:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        uid:
          type: string
          example: logger1
        name:
          type: string
          example: logger
        slug:
          type: string
          example: logger
        url:
          type: string
          example: 0.0.0.0
        token:
          type: string
          example: MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
        mode:
          type: string
          example: simple
        ip:
          type: string
          example: 0.0.0.0
    User:
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: johndoe@example.com
        authentication_token:
          type: string
          example: MDAwMDAwMDAwMDAwMDA
        unconfirmed_email:
          type: boolean
          example: null
security:
  - AuthToken: []
tags:
  - name: app
    description: Endpoints that interact directly with the application.
  - name: component
    description: Endpoints that interact with application components.
  - name: deploy
    description: Endpoints for deploying code.
  - name: evar
    description: Endpoints for managing environment variables.
  - name: event
    description: Endpoints for interacting with events.
  - name: remote
    description: Endpoints for accessing servers and components.
  - name: service
    description: Endpoints for interacting with individual services within components.
  - name: user
    description: Endpoints that interact with user data.
